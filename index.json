[{"content":"Why Least Privilege Matters Overly permissive IAM roles are still one of the most exploited weaknesses in AWS. Whether it‚Äôs a developer giving s3:* to an app or a CI/CD pipeline allowed to iam:*, misconfigurations create unnecessary attack surface.\nIAM Access Analyzer helps fix that ‚Äî by showing you what access your policies really grant, and by helping you build tighter permissions from real-world usage data.\nWhat Is IAM Access Analyzer? IAM Access Analyzer is a native AWS feature that helps you:\nIdentify who has access to your AWS resources (trust policies) Analyze what your IAM policies allow (policy analyzer) Generate fine-grained IAM policies based on actual usage It\u0026rsquo;s split into two capabilities:\nFeature Purpose Policy validation \u0026amp; simulation Checks whether your policies are overly broad Access Analyzer (policy generation) Watches IAM role activity and suggests tight-scoped policy JSON Available via console, CLI, SDK, and supported by Terraform\nEnabling IAM Access Analyzer You must have AWS Organizations enabled or a standalone account with IAM Analyzer permissions.\nCLI: aws accessanalyzer create-analyzer --analyzer-name \u0026#34;org-analyzer\u0026#34; --type ORGANIZATION Use --type ACCOUNT if you\u0026rsquo;re not using AWS Organizations.\nTerraform: resource \u0026#34;aws_accessanalyzer_analyzer\u0026#34; \u0026#34;default\u0026#34; { name = \u0026#34;org-analyzer\u0026#34; type = \u0026#34;ORGANIZATION\u0026#34; } Once enabled, it starts monitoring for:\nExternal access grants (e.g., cross-account S3 bucket access, CICD access\u0026hellip;) Overly broad IAM policies Analyzing a Role for Over-Permission Let‚Äôs simulate a policy and see if it‚Äôs too permissive.\nStep 1: Write the IAM policy { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } } Step 2: Run a simulation aws iam simulate-custom-policy --policy-input-list file://policy.json --action-names \u0026#34;s3:ListBucket\u0026#34; \u0026#34;ec2:StartInstances\u0026#34; \u0026#34;iam:DeleteUser\u0026#34; You‚Äôll get a result for each action: allowed or explicitDeny.\nGenerating Policies from CloudTrail Activity IAM Access Analyzer can automatically generate least-privilege IAM policies by analyzing your CloudTrail logs. This lets you replace over-permissive policies with ones that reflect actual usage.\nThis requires CloudTrail to be enabled in the account and set to log to an S3 bucket.\nStep-by-Step in AWS Console Go to the IAM Console:\nNavigate to IAM and click on the desired role. Go to ‚ÄúGenerate policy based on CloudTrail events‚Äù:\nHere you‚Äôll see the \u0026ldquo;Generate Policy\u0026rdquo; button, click it. Fill the form:\nFill the form to meet your criteria. You can choose a time range from the available CloudTrail logs. Choose the CloudTrail trail that has the relevant data. Click on Generate Policy:\nAWS will scan CloudTrail logs and determine which actions were used. Review and download the policy once ready:\nOnce the job completes, you‚Äôll see a generated policy document. You can copy the JSON, edit it if needed, and attach it to the principal directly or via Terraform. üß† This process can take a few minutes depending on the volume of logs. The policy reflects only observed usage ‚Äî consider reviewing manually before attaching.\nPro Tips Always start Access Analyzer before running new workloads (so it can monitor them) Run it again after a few days of usage to refine permissions Use managed policies for standard access, but custom policies for sensitive services like S3, IAM, EC2 Extra Hardening Use these IAM policy techniques to limit blast radius:\nRequire MFA for IAM console sessions { \u0026#34;Condition\u0026#34;: { \u0026#34;BoolIfExists\u0026#34;: {\u0026#34;aws:MultiFactorAuthPresent\u0026#34;: \u0026#34;false\u0026#34;} } } Use Permission Boundaries Permission boundaries are a powerful but often misunderstood feature of IAM.\nA permission boundary is an advanced policy that defines the maximum permissions a role or user can be granted ‚Äî even if their assigned IAM policy is broader. It acts as a safety net or ‚Äúguardrail‚Äù to prevent privilege escalation or accidental over-permissioning.\nFor example, if a developer tries to attach an AdministratorAccess policy to a role, but a permission boundary restricts actions to s3:* and ec2:Describe*, then only those actions will be allowed ‚Äî everything else is denied.\nThis is especially useful in environments where:\nDevelopers or CI/CD pipelines create their own roles or policies You\u0026rsquo;re delegating IAM permissions within a sandbox or dev account You want to limit access in automation scenarios without managing every detail To use them effectively:\nDefine a boundary policy that allows a scoped set of actions Attach the boundary to IAM roles during creation Enforce via Infrastructure as Code (like Terraform) to avoid manual missteps Final Thoughts IAM Access Analyzer helps bridge the gap between \u0026ldquo;theory of least privilege\u0026rdquo; and actual policy enforcement. It\u0026rsquo;s not perfect ‚Äî but when combined with Terraform and CloudTrail, it\u0026rsquo;s one of the best tools to clean up risky roles without slowing down dev teams.\nUse it to:\nSimulate policies before deployment Detect risky cross-account access Generate scoped policies from real CloudTrail usage In a world of too much access, precision wins. IAM Access Analyzer gives you the tools ‚Äî now go sharpen your policies. üîê\n","permalink":"https://fpulidov.github.io/posts/iam-access-analyzer-least-privilege/","summary":"Use IAM Access Analyzer to build least-privilege IAM roles in AWS ‚Äî includes policy generation from CloudTrail, Terraform integration, and AWS best practices.","title":"Building Least-Privilege IAM Roles with IAM Access Analyzer"},{"content":"Why Root Account Usage Should Raise an Alarm In a secure AWS setup, the root user should almost never be used. It has unrestricted access to everything in the account, and actions taken with it can‚Äôt be scoped or logged per identity.\nIf your root user performs any API call, it‚Äôs almost always worth reviewing.\nWhat We Want to Detect Any API call made by the root user (e.g., CreateUser, StartInstances, etc.) Especially sensitive actions like UpdateAccountPasswordPolicy, CreateAccessKey, or DeleteTrail CloudTrail captures these events, and we can route them into EventBridge to trigger an alert.\nSolution Overview CloudTrail logs all management events EventBridge Rule matches events made by the root user SNS Topic or Lambda Function sends alerts (email, Slack, etc.) Step 1: Enable CloudTrail CloudTrail must be enabled and logging to an S3 bucket in your account.\nMost accounts have a default trail. If not:\nGo to CloudTrail \u0026gt; Trails Create a new multi-region trail Enable management events Step 2: Create an EventBridge Rule for Root User Events In the Console: Go to EventBridge \u0026gt; Rules Click Create rule Name your rule (e.g., DetectRootUserUsage) Choose Event Source: AWS events Under Event pattern, choose Custom pattern and paste: { \u0026#34;detail\u0026#34;: { \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: [\u0026#34;Root\u0026#34;] } } } Target: Choose SNS topic (or Lambda if you require some formatting text or to write to Slack for example) Step 3: Create SNS Topic and Email Subscription In the Console: Go to SNS \u0026gt; Topics \u0026gt; Create topic Choose Standard, name it root-usage-alerts Create a subscription to this topic (email) Confirm the subscription from your inbox Optional: Send Slack Alert via Lambda If you prefer Slack notifications instead of email:\nCreate a simple Lambda function that posts to Slack using a webhook Set your EventBridge rule target to that Lambda This allows formatting and routing alerts into your team\u0026rsquo;s incident channel.\nHow to Test It Use the AWS root account to perform a benign action (e.g., visit the Billing Dashboard).\nYou should see an alert shortly after in your email or Slack.\nBest Practices Lock away your root credentials in a secure vault (not used for daily access) Enable MFA on root ‚Äî ideally phishing-resistant (YubiKey, FIDO2) Delete root access keys if they exist Regularly review CloudTrail and GuardDuty findings Final Thoughts If you\u0026rsquo;re detecting root usage in AWS ‚Äî that\u0026rsquo;s a signal. Either something\u0026rsquo;s misconfigured, or something\u0026rsquo;s wrong. By setting up this detection and alerting pipeline, you can react quickly and minimize risk.\nIn future guides, we\u0026rsquo;ll build on this with incident response workflows and automated remediations.\n","permalink":"https://fpulidov.github.io/posts/detect-root-account-usage/","summary":"Detect and alert on AWS root account usage using CloudTrail, EventBridge, SNS, and optional Slack notifications. Step-by-step setup and Terraform included.","title":"How to Detect AWS Root Account Usage (And Respond to It)"},{"content":"Misconfigurations continue to be the leading cause of cloud breaches. This 2025 checklist covers the most critical AWS security controls you should implement‚Äîwhether you\u0026rsquo;re running a side project or managing production workloads.\nUse it to review your setup, catch vulnerabilities early, and build security in by default.\n1. Secure the Root Account Enable MFA (preferably a hardware key like YubiKey or FIDO2) Delete root access keys if any exist Use an IAM user or IAM Identity Center for daily admin tasks 2. Block Public S3 Access Enable Block Public Access at the account level Verify bucket-level settings for sensitive workloads Monitor via AWS Config rules or Access Analyzer AWS now enables these protections by default‚Äîbut older accounts may still be vulnerable.\n3. Apply IAM Best Practices Use IAM Identity Center (SSO) for human access Replace long-term credentials with STS temporary credentials Enforce MFA using IAM policies \u0026#34;Condition\u0026#34;: { \u0026#34;BoolIfExists\u0026#34;: { \u0026#34;aws:MultiFactorAuthPresent\u0026#34;: \u0026#34;true\u0026#34; } } Use tools like IAM Access Analyzer and Policy Simulator to refine access.\n4. Enable Logging Everywhere Service Configuration CloudTrail Org-wide, multi-region, logs to S3 and CloudWatch VPC Flow Logs All VPCs, at least to S3 GuardDuty All regions + EKS enabled AWS Config Track all resource types across all regions Set log retention (30‚Äì90 days) to avoid unnecessary costs.\n5. Enable Threat Detection Enable GuardDuty (monitors DNS, CloudTrail, network activity) Enable Security Hub for a centralized security view Use AWS Config for continuous assessment and configuration changes logging Set up SNS alerts for critical and high GuardDuty or Security Hub findings.\n6. Harden Network Security Audit Security Groups (block 0.0.0.0/0 on SSH/RDP) Use SSM Session Manager instead of bastion hosts Enable VPC Flow Logs for visibility Use private subnets for internal resources (Advanced) Consider AWS Network Firewall for deeper inspection 7. Monitor Cloud Costs Create AWS Budgets with thresholds for cost spikes Enable Anomaly Detection for new service usage or region activity This helps catch signs of misconfigured resources or potential compromise.\n8. Automate Security and Compliance Use Control Tower for multi-account environments Define custom AWS Config rules with Lambda Consider using AWS Config automatic remediation for certain non-compliant changes Send weekly Security Hub summaries to email or Slack Automation helps maintain standards even as your environment grows.\n9. Perform Monthly Checks Run IAM Credential Reports (or better yet, automate it to detect unused credentials) Review Trusted Advisor free security checks Track Security Hub Score and set improvement targets Use these reports to catch drift and stale resources early.\n10. Stay Current and Keep Improving Review this checklist quarterly Subscribe to AWS Security blog updates Consider running threat detection simulations using GuardDuty Malware Protection Implement Incident Response playbooks to follow in case of incident Final Thoughts Security isn\u0026rsquo;t just about avoiding breaches‚Äîit\u0026rsquo;s about building systems that are resilient by design.\nWhether you\u0026rsquo;re new to AWS or an experienced engineer, this checklist gives you a clear baseline to protect your environment from common mistakes.\nStart with the basics. Stay consistent. Keep leveling up. üîê\n","permalink":"https://fpulidov.github.io/posts/aws-security-checklist-2025/","summary":"A step-by-step checklist to secure your AWS account in 2025 ‚Äî includes IAM hardening, S3 lockdown, logging, and budget alerts. Beginner to intermediate friendly.","title":"AWS Security Checklist 2025: 10 Critical Steps to Secure Your Cloud"},{"content":"IAM users once helped us bootstrap AWS environments, but in 2025 they are outdated and dangerous. This guide breaks down the risks, modern alternatives, and how to migrate securely‚Äîstep by step.\nWhy IAM Users Are a Problem in 2025 Risk Impact Frequency Long-term credentials #1 cause of cloud breaches 63% of compromises Manual MFA enforcement Inconsistent protection 42% of accounts No centralized lifecycle Orphaned users linger 3.7x more vulnerable Cross-account sprawl Hard to audit/maintain 81% of enterprises Limited visibility Manual key rotation required 57% non-compliant Modern Alternatives to IAM Users 1. IAM Identity Center (Successor to AWS SSO) Best for: Human access to AWS across accounts\nBenefits:\nIntegrates with IdPs like Google, Azure AD, Okta Manages permissions via centralized permission sets Enables SCIM provisioning and audit visibility 2. STS + AssumeRole for Automation Best for: EC2, Lambda, and inter-service communication\nAdvantages:\nCredentials expire automatically Supports external ID and MFA No static secrets to manage aws sts assume-role --role-arn arn:aws:iam::123456789012:role/AutomationAccess --role-session-name \u0026#34;devops-session\u0026#34; 3. OIDC Federation for CI/CD Pipelines Best for: GitHub Actions, GitLab CI, Bitbucket\nAdvantages:\nNo access keys stored in code Tight role scoping per repo/workflow Credentials rotate automatically GitHub Actions Example:\njobs: deploy: permissions: id-token: write contents: read steps: - uses: aws-actions/configure-aws-credentials@v4 with: role-to-assume: arn:aws:iam::123456789012:role/github-actions aws-region: us-east-1 Migration Roadmap Phase 1: Discover Existing IAM Users and Usage Before making changes, you need a clear picture of who‚Äôs using what.\nStep 1: Generate a Credential Report This report lists all IAM users in your account, their MFA status, and if they have active access keys.\naws iam generate-credential-report aws iam get-credential-report --query Content --output text | base64 -d \u0026gt; credential-report.csv Review this CSV file to identify:\nUsers without MFA Users with long-standing credentials Unused accounts Step 2: Map Use Cases Group IAM users into categories:\nHuman access ‚Üí plan migration to Identity Center CI/CD and automation ‚Üí migrate to STS or OIDC Legacy systems ‚Üí evaluate and isolate Phase 2: Replacement Replace human IAM users with IAM Identity Center Replace automated access with STS AssumeRole Reconfigure CI/CD pipelines to use OIDC federation Phase 3: Cleanup Make sure that, for all migrated users, there are no remaining credentials\nIf You Must Keep IAM Users\u0026hellip; If you have legacy apps that require IAM users:\nEnforce MFA Rotate access keys automatically Monitor with CloudTrail and GuardDuty Final Thoughts IAM users served their time‚Äîbut in 2025, they are no longer secure or scalable.\nBy transitioning to Identity Center for users, STS for automation, and OIDC for pipelines, you\u0026rsquo;re moving toward a modern, zero-trust access model that scales with your org.\nLet IAM users rest in peace. Your future is federated. üîê\n","permalink":"https://fpulidov.github.io/posts/aws-iam-users-alternatives/","summary":"Stop using IAM users in AWS. This guide explains why they\u0026rsquo;re risky and how to migrate to Identity Center, STS, and OIDC-based access ‚Äî step-by-step.","title":"IAM Users Are Dead: Modern AWS Access Control for 2025"},{"content":"Misconfigurations remain the top cause of cloud security incidents. While AWS has improved defaults over the years, many organizations still leave critical gaps open to attackers.\nThis guide outlines five high-impact AWS security misconfigurations, explains why they matter, and shows how to fix them with both Console and Terraform examples. These are based on real-world findings from security audits in 2024‚Äì2025.\n1. Public S3 Buckets Despite stronger AWS defaults, public S3 buckets continue to expose sensitive data.\nWhy It Matters Public objects can be discovered via brute force or Google indexing. Attackers use open buckets for staging malware or stealing PII. How to Fix It AWS Console:\nGo to S3 \u0026gt; Block Public Access settings for this account Enable all four options at the account level. Account level restrictions will override object level restrictions. Terraform:\nresource \u0026#34;aws_s3_account_public_access_block\u0026#34; \u0026#34;global\u0026#34; { block_public_acls = true block_public_policy = true ignore_public_acls = true restrict_public_buckets = true } Tooling Tip:\nUse Access Analyzer for S3 to identify any buckets with public access.\n2. Overly Permissive IAM Policies Too often, IAM policies grant Action: * or Resource: * access‚Äîeven for automation or dev roles.\nWhy It Matters Violates least privilege. Increases blast radius of compromised credentials. How to Fix It Audit Existing Policies:\naws iam simulate-custom-policy --policy-input-list file://policy.json --action-names \u0026#34;s3:GetObject\u0026#34; \u0026#34;ec2:TerminateInstances\u0026#34; Use Permission Boundaries or Access Analyzer:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [\u0026#34;s3:GetObject\u0026#34;], \u0026#34;Resource\u0026#34;: [\u0026#34;arn:aws:s3:::my-secure-bucket/*\u0026#34;] } ] } Pro Tip:\nUse IAM Access Analyzer to generate least-privilege policies from actual usage.\n3. IAM Users Without MFA (or Still Using IAM Users at All) IAM users should no longer be used for human access in 2025.\nWhy It Matters IAM users with static access keys are easy targets. No central lifecycle management (unlike SSO). What to Do Instead Adopt IAM Identity Center (SSO) with your identity provider. Use STS AssumeRole for temporary access in automation. For legacy systems: Enforce MFA Monitor with AWS Config + CloudTrail Example MFA Enforcement Policy:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Deny\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;BoolIfExists\u0026#34;: { \u0026#34;aws:MultiFactorAuthPresent\u0026#34;: \u0026#34;false\u0026#34; } } } ] } 4. Security Groups Open to the World Security groups allowing 0.0.0.0/0 on port 22 or 3389 remain common and dangerous.\nWhy It Matters These ports are constantly scanned. Exploits against SSH/RDP services are common. How to Fix It Recommended:\nUse AWS Systems Manager Session Manager for shell access (no open ports required).\n5. Insufficient Logging and Monitoring Logging is essential for investigation, compliance, and threat detection.\nMust-Have Services AWS CloudTrail (multi-region, org-wide) AWS Config Amazon GuardDuty AWS Security Hub By leveraging services like AWS CloudTrail, AWS Config, Amazon GuardDuty, and AWS Security Hub, organizations can establish a comprehensive security framework in AWS. Together, these tools provide detailed visibility into API activity, ensure continuous compliance with best practices, detect threats using intelligent analysis, and centralize security findings for actionable insights. This integrated approach enhances your ability to prevent, detect, and respond to security incidents effectively, while maintaining a strong security posture across your AWS environment.\nCost Tip:\nSet retention on CloudWatch logs to avoid unnecessary spend.\nFinal Thoughts Misconfigurations like these are often easy to fix‚Äîbut also easy to miss.\nBy tackling these five areas, you significantly reduce the likelihood of breaches, increase visibility, and build a security-first cloud foundation.\nComing up: deeper dives into automation, policy generation, and detection workflows in AWS.\nCloud security isn\u0026rsquo;t just about avoiding breaches‚Äîit\u0026rsquo;s about building resilient, auditable systems. These fixes are a strong start.\n","permalink":"https://fpulidov.github.io/posts/aws-security-misconfigurations-guide/","summary":"Five AWS misconfigurations still causing breaches in 2025 ‚Äî includes fixes for public S3 buckets, over-permissive IAM, open security groups, and missing monitoring.","title":"5 Critical AWS Security Misconfigurations (2025 Edition) ‚Äì How to Find \u0026 Fix Them"},{"content":"üîê Cloud Security \u0026amp; Auditing Prowler AWS security best practices assessment, CIS benchmarks, and more.\nTags: AWS, CLI, Auditing\nCloudsplaining Analyzes IAM policies for privilege escalation and misconfigurations.\nTags: AWS, IAM, CLI\nCartography Security-focused asset mapping using a Neo4j graph database.\nTags: AWS, Graph, Visualization\n‚öôÔ∏è Infrastructure as Code Security Checkov Static analysis of Terraform, CloudFormation, Kubernetes, and more.\nTags: IaC, Multi-Cloud, Terraform\ntfsec Security scanner for Terraform code.\nTags: Terraform, CLI\nKICS Finds vulnerabilities and compliance issues in IaC across cloud platforms.\nTags: Multi-Cloud, IaC, Scanning\nüß™ Vulnerability Scanning Trivy Scanner for container images, SBOMs, file systems, and Git repos.\nTags: Containers, SBOM, CLI\nüîé Threat Detection \u0026amp; Analysis Sigma Generic signature format for SIEM systems.\nTags: Detection, SIEM, SOC\nüìö Notable Docs \u0026amp; Frameworks AWS Security Reference Architecture (SRA) Official AWS modular blueprints for securing multi-account environments.\nHave an open-source tool to recommend? Reach out or submit a PR.\n","permalink":"https://fpulidov.github.io/resources/","summary":"Battle-tested tools, references, and learning materials for cloud security and AWS hardening.","title":"Security Resources"}]